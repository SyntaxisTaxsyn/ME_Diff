Imports System.IO
Module Functions

    ''' <summary>
    ''' Deserializes an xml encoded file generated by the ME GFX/GGFX Export utility within FTView
    ''' </summary>
    ''' <param name="Fpath">Path to xml encoded GFX/GGFX file</param>
    ''' <returns></returns>
    Public Function DeserializeObjectFromXMLFile(ByRef Fpath As String)

        Dim myobject As New gfx
        Dim myserializer As New Xml.Serialization.XmlSerializer(myobject.GetType)
        Dim myfilestream As FileStream = New FileStream(Fpath, FileMode.Open)
        myobject = CType(myserializer.Deserialize(myfilestream), gfx)
        DeserializeObjectFromXMLFile = myobject
        myfilestream.Close()
        myfilestream = Nothing
        myserializer = Nothing

    End Function

    ''' <summary>
    ''' Compares 2 objects for parity, calls another instance of itself when another group data type is found nested that matches on both sides
    ''' </summary>
    ''' <param name="LObj">Left File Object</param>
    ''' <param name="RObj">Right File Object</param>
    ''' <param name="fname">Name of the xml file. Is used for producing the output report</param>
    ''' <param name="gnest">Group Nesting String. Contains a string value that indicates the group nesting path of the object</param>
    ''' <returns>A message describing the first non conforming detail found that halted the algortihm if 1 is found, or nothing when the comparison matches</returns>
    Public Function CompareLikeForLike(ByRef LObj As ME_Diff.groupType, ByRef RObj As ME_Diff.groupType, ByVal fname As String, ByVal gnest As String)

        'todo - strengthen the checking of group contents here 
        ' currently group match check is only item count
        ' expand to include object type and object name 

        CompareLikeForLike = ""
        'MsgBox(LObj.GetType.ToString)
        If Not LObj.Items.Count = RObj.Items.Count Then
            CompareLikeForLike = "Object count match failure"
            Exit Function
        End If
        For a = 0 To LObj.Items.Count - 1
            If LObj.ItemsElementName(a) = RObj.ItemsElementName(a) Then
                'Select Case LObj.ItemsElementName(a)
                '    Case ME_Diff.ItemsChoiceType.group
                'End Select

                ' matching element types are found so proceed to compare all the properties of the objects after checking they are not a group type
                ' Check not a group else call this function again
                If LObj.ItemsElementName(a) = ME_Diff.ItemsChoiceType.group Then
                    Dim msg As String = ""
                    Dim gobj As ME_Diff.groupType = LObj.Items(a)
                    msg = CompareLikeForLike(LObj.Items(a), RObj.Items(a), fname, gnest & "/" & gobj.name)
                Else
                    Call CompareItemsByType_Obj(LObj.Items(a), RObj.Items(a), fname, gnest)
                End If
            End If
        Next
        'If LObj.itemsElementName Then
    End Function

    ''' <summary>
    ''' Returns the name of the ME object type as a string 
    ''' </summary>
    ''' <param name="obj">ME Object</param>
    ''' <returns>A string containing the name</returns>
    Public Function GetMEObjectType(ByVal obj As Object)
        GetMEObjectType = ""
        Dim str As String
        Dim wrk()
        str = obj.GetType().ToString
        wrk = Split(str, ".")
        str = wrk(1)
        GetMEObjectType = str
    End Function

End Module
