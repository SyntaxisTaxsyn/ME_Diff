Imports System.IO
Module Functions

    ''' <summary>
    ''' Deserializes an xml encoded file generated by the ME GFX/GGFX Export utility within FTView
    ''' </summary>
    ''' <param name="Fpath">Path to xml encoded GFX/GGFX file</param>
    ''' <returns></returns>
    Public Function DeserializeObjectFromXMLFile(ByRef Fpath As String)

        Dim myobject As New gfx
        Dim myserializer As New Xml.Serialization.XmlSerializer(myobject.GetType)
        Dim myfilestream As FileStream = New FileStream(Fpath, FileMode.Open)
        myobject = CType(myserializer.Deserialize(myfilestream), gfx)
        DeserializeObjectFromXMLFile = myobject
        myfilestream.Close()
        myfilestream = Nothing
        myserializer = Nothing

    End Function

    Public Function GetTypeFromString(ByRef Input As String) As String

        Dim arr() As String
        arr = Input.Split(".")
        If arr.Count = 2 Then
            If arr(0) = "ME_Diff" Then
                Return arr(1)
            End If
        End If
        Return ""
    End Function

    ''' <summary>
    ''' Compares 2 objects for parity, calls another instance of itself when another group data type is found nested that matches on both sides
    ''' </summary>
    ''' <param name="LObj">Left File Object</param>
    ''' <param name="RObj">Right File Object</param>
    ''' <param name="fname">Name of the xml file. Is used for producing the output report</param>
    ''' <param name="gnest">Group Nesting String. Contains a string value that indicates the group nesting path of the object</param>
    ''' <returns>A message describing the first non conforming detail found that halted the algortihm if 1 is found, or nothing when the comparison matches</returns>
    Public Function CompareLikeForLike(ByRef LObj As ME_Diff.groupType, ByRef RObj As ME_Diff.groupType, ByVal fname As String, ByVal gnest As String)

        'todo - strengthen the checking of group contents here 
        ' currently group match check is only item count
        ' expand to include object type and object name 

        CompareLikeForLike = ""
        'MsgBox(LObj.GetType.ToString)
        If Not LObj.Items.Count = RObj.Items.Count Then

            ' Group contents dont match so we need to use alternate algorithm that attempts to match group elements by name before comparing them
            For Each Litm In LObj.Items
                For Each Ritm In RObj.Items
                    If Litm.name = Ritm.name Then
                        If Litm.GetType = Ritm.GetType Then
                            ' Would appear to be a candidate for attempting a deeper comparison of elements on
                            If Litm.GetType.ToString = "ME_Diff.groupType" Then
                                Dim msg As String = ""
                                Dim gobj As ME_Diff.groupType = Litm
                                msg = CompareLikeForLike(Litm, Ritm, fname, gnest & "/" & gobj.name)
                            Else
                                Call CompareItemsByType_Obj(Litm, Ritm, fname, gnest)
                            End If
                        End If
                    End If
                Next
            Next

            ' Now try to pull the names of the groups out that dont have matches
            ' Find groups that dont match on both sides
            If LObj.Items.Count > RObj.Items.Count Then
                ' Left has more, find the left items that dont exist
                Dim NoMatch As Boolean = False
                For Each Litm In LObj.Items
                    For Each Ritm In RObj.Items
                        If Ritm.name = Litm.name Then
                            If Ritm.GetType = Litm.GetType Then
                                NoMatch = True
                                Exit For
                            End If
                        End If
                    Next
                    If NoMatch = False Then
                        Call AddListContentMatchGroupException(Litm.name.ToString, fname, gnest & "/" & LObj.name, "Object Type : " & GetTypeFromString(Litm.GetType.ToString) & " - Parameter : Group item mismatch - Left Value = Present, Right Value = None")
                    End If
                    NoMatch = False
                Next
            End If

            If RObj.Items.Count > LObj.Items.Count Then
                ' Right has more, find the right items that dont exist
                Dim NoMatch As Boolean = False
                For Each Ritm In RObj.Items
                    For Each Litm In LObj.Items
                        If Ritm.name = Litm.name Then
                            If Ritm.GetType = Litm.GetType Then
                                NoMatch = True
                                Exit For
                            End If
                        End If
                    Next
                    If NoMatch = False Then
                        Call AddListContentMatchGroupException(Ritm.name.ToString, fname, gnest & "/" & RObj.name, "Object Type : " & GetTypeFromString(Ritm.GetType.ToString) & " - Parameter : Group item mismatch - Left Value = None, Right Value = Present")
                    End If
                    NoMatch = False
                Next
            End If

        Else

            For a = 0 To LObj.Items.Count - 1
                If LObj.ItemsElementName(a) = RObj.ItemsElementName(a) Then
                    'Select Case LObj.ItemsElementName(a)
                    '    Case ME_Diff.ItemsChoiceType.group
                    'End Select

                    ' matching element types are found so proceed to compare all the properties of the objects after checking they are not a group type
                    ' Check not a group else call this function again
                    If LObj.ItemsElementName(a) = ME_Diff.ItemsChoiceType.group Then
                        Dim msg As String = ""
                        Dim gobj As ME_Diff.groupType = LObj.Items(a)
                        msg = CompareLikeForLike(LObj.Items(a), RObj.Items(a), fname, gnest & "/" & gobj.name)
                    Else
                        Call CompareItemsByType_Obj(LObj.Items(a), RObj.Items(a), fname, gnest)
                    End If
                End If
            Next

        End If

    End Function

    ''' <summary>
    ''' Returns the name of the ME object type as a string 
    ''' </summary>
    ''' <param name="obj">ME Object</param>
    ''' <returns>A string containing the name</returns>
    Public Function GetMEObjectType(ByVal obj As Object)
        GetMEObjectType = ""
        Dim str As String
        Dim wrk()
        str = obj.GetType().ToString
        wrk = Split(str, ".")
        str = wrk(1)
        GetMEObjectType = str
    End Function

End Module
